Lang


                                                  10            27            11

        10                      11
                                                9                                12


      9               21            12
           8
                               9
           0.5002
          7                    0.5002
                                 10
          0.5000
                      19         0.5000
             7
                      0.7483   8
                  5       6
                  1.7811
                      6   1.7811

                      4
             13                14
                  11  50.2500 12
                  1.0000  1.0000
                                                        25              26
                      3
           15                    16
                 13   0.2500                    13                               14
                      4    14
                 1.2500    1.2500

                       2
         17                       18
                15     0.2500 16
                       3
                1.5000      1.5000
                                                                1
      1                1
                                   20
               20      0.2500 18
                       2
               3.5638       1.7500


                                                15                               16


                      17
                      1.7500
                                                      22                  23


                                                17                               18
                     19

                                                          19          20

    Figure 2 : Left: the stick ﬁgure as drawn within TreeMaker. Right: Result of the optimization
    (only circles are shown).

between the circles.) Whenever two circles and the intervening rivers all touch one another, TreeMaker draws
a line between the circle centers, shown here in green. These lines are actually some of the creases of the
desired folded shape; they form a “skeleton” of the full crease pattern.
    Conceptually, one ﬁnds the optimum packing by inﬂating all of the circles and rivers at the same rate
with the circle centers trapped within the boundaries of the square and allowing the circles and rivers to move
around during the inﬂation process until they are all wedged into position. This is, effectively, a nonlinear
constrained optimization problem, and, stripped of the visual imagery of circles, rivers, and packing, it
all boils down to a fairly straightforward algebraic description, which is what is needed for a computer
implementation.

    We assume that the tree graph can be described by a set of nodes fNig, edges fE jg, and edge weights
w j, where the weight w j gives the desired relative length of the jth ﬂap of the desired base. For every path
between two nodes fNi;Njg we deﬁne the path length li j ≡ ∑k wk as the (unique) sum of the weights of the
edges between nodes Ni and Nj.

    With every leaf node Ni of the tree graph, we associate a vertex Vi = (xi;yi), which will be the center
of the associated circle (and will also turn out to be the point in the square that maps to the tip of the
corresponding ﬂap). We further introduce the scale factor m, which sets the size of the folded shape relative
to the original tree graph, so that if an edge of the tree graph had desired length w j, its corresponding ﬂap in
the folded form will have actual length mw j. The non-overlap condition can be expressed as an inequality:

                                     jVi −Vjj ≥ mli j;                              (1)

for every path li j. The requirement that circle centers lie within the square is similarly expressible as inequal-
ities:
                                  0 ≤ xi ≤ 1; 0 ≤ yi ≤ 1;                           (2)

for every vertex Vi. For ease of foldability, one would like the folded form as large as possible relative
to the size of the square; in other words, we should like m to be as large as possible. The solution of
the origami optimization problem then becomes a case of maximizing the scale m subject to both sets of
inequality constraints. And so, the solution of the arrangement of vertices requires the solution of a nonlinear
constrained optimization, with linear and quadratic inequality constraints and a nonconvex feasible region.

                                          14