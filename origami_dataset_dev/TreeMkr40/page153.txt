       CFSQP

CFSQP is a general-purpose nonlinear constrained optimization code, written in C, developed by
the research group of Professor Andre Tits at the University of Maryland. It forms the core of the
numerical optimization routines (replacing a home-rolled implementation of the Augmented
Lagrangian Multiplier method used in earlier versions). A description of the routines may be
found on the FSQP Home Page, located at

 http://www.isr.umd.edu/Labs/CACSE/FSQP/fsqp.html

CFSQP is used with permission according to the following conditions of use:

                           Conditions for External Use

          1. The CFSQP routines may not be distributed to third parties.
             Interested  parties  should contact  the authors directly.
          2. If modifications  are  performed  on  the  routines, these
             modifications  shall be  communicated to the authors.  The
             modified  routines  will  remain the sole  property of the
             authors.
          3. Due acknowledgment  must be  made of the  use of the CFSQP
             routines in research  reports  or  publications.  Whenever
             such reports are released for public access, a copy should
             be forwarded to the authors.
          4. The CFSQP  routines  may  only  be  used  for research and
             development, unless it has been agreed  otherwise with the
             authors in writing.

       Copyright (c) 1993-1997 by Craig T. Lawrence, Jian L. Zhou, and
                               Andre L. Tits
       All rights Reserved.

          Enquiries should be directed to
                            ,
                  Prof. Andre L. Tits
                  Electrical Engineering Dept.
                  and Institute for Systems Research
                  University of Maryland
                  College Park, Md 20742
                  U. S. A.

                  Phone:  301-405-3669
                  Fax:    301-405-6707
                  E-mail: andre@eng.umd.edu

       My libraries

TreeMaker uses a number of general-purpose class libraries that Iâ€™ve written. They are:


                                        153